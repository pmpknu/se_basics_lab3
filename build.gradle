import java.awt.Toolkit

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.9.22'
    id 'war'
    id 'net.nemerosa.versioning' version '2.4.0'
}

group = 'web'
version = versioning.info.full

repositories {
    mavenCentral()
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

dependencies {
    compileOnly('jakarta.enterprise:jakarta.enterprise.cdi-api:4.0.1')
    compileOnly('jakarta.validation:jakarta.validation-api:3.0.2')
    compileOnly('jakarta.ejb:jakarta.ejb-api:4.0.1')
    compileOnly('jakarta.faces:jakarta.faces-api:3.0.0')
    compileOnly('jakarta.servlet:jakarta.servlet-api:6.0.0')
    compileOnly('jakarta.persistence:jakarta.persistence-api:3.1.0')
    compileOnly('jakarta.platform:jakarta.jakartaee-web-api:10.0.0')
    compileOnly('jakarta.json:jakarta.json-api:2.1.1')
    compileOnly('jakarta.json.bind:jakarta.json.bind-api:3.0.0')

    implementation('com.fasterxml.jackson.core:jackson-databind:2.12.1')
    implementation('org.postgresql:postgresql:42.6.0')
    implementation('org.primefaces:primefaces:13.0.0:jakarta')

    implementation('org.jetbrains.kotlin:kotlin-stdlib-jdk8')
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}

task compile {
    compileKotlin
}

task playSound {
    doLast {
        def toolkit = Toolkit.getDefaultToolkit()
        toolkit.beep()
    }
}

build.finalizedBy(playSound)

task getPreviousRevisions {
    doLast {
        def process = "git rev-list --max-count=4 HEAD".execute()
        process.waitFor()
        def revisions = process.in.text.readLines()
        file('revisions.txt').text = revisions.join('\n')
    }
}

task buildPreviousRevisions {
    dependsOn getPreviousRevisions

    doLast {
        def revisions = file('revisions.txt').readLines()
        def projectDir = project.projectDir
        def buildDir = new File(project.buildDir, 'previous-builds')

        if (!buildDir.exists()) {
            buildDir.mkdirs()
        }

        revisions.each { rev ->
            def revisionDir = new File(buildDir, rev)
            if (!revisionDir.exists()) {
                revisionDir.mkdirs()
            }

            // Checkout the specific revision
            println "Checking out revision: ${rev}"
            def checkoutProcess = "git checkout ${rev}".execute([], projectDir)
            checkoutProcess.waitFor()
            println checkoutProcess.in.text
            println checkoutProcess.err.text

            if (checkoutProcess.exitValue() != 0) {
                println "Failed to checkout revision: ${rev}"
                return
            }

            // Change the version dynamically based on the revision
            project.version = rev

            // Build the project
            println "Building revision: ${rev}"
            def buildProcess = "gradle clean build".execute([], projectDir)
            buildProcess.consumeProcessOutput(System.out, System.err)
            buildProcess.waitFor()

            if (buildProcess.exitValue() != 0) {
                println "Failed to build revision: ${rev}"
                return
            }

            def buildedWarFile
            // Check contents of the libs directory
            def libsDir = new File("${project.buildDir}/libs")
            if (libsDir.exists() && libsDir.isDirectory()) {
                println "Contents of the libs directory after build:"
                libsDir.eachFile { file ->
                    println file.name
                    buildedWarFile = file.name
                }
            } else {
                println "libs directory not found or not a directory"
            }

            // Define the expected WAR file name
            println("build dir: ${project.buildDir}")
            println("project name: ${project.name}")
            println("project vers: ${project.version}")
            println("version ${version}")
            //def warFileName = "${project.name}-${rev}.war"
            def warFileName = buildedWarFile
            def warFile = new File(libsDir, warFileName)
            println "Looking for WAR file: ${warFile}"

            if (warFile.exists()) {
                warFile.renameTo(new File(revisionDir, warFileName))
                println "WAR file for revision ${rev} moved to ${revisionDir}"
            } else {
                println "WAR file not found for revision: ${rev}"
            }

            // Check contents of made revision directory
            if (revisionDir.exists() && revisionDir.isDirectory()) {
                println "Contents of the revision directory after build:"
                libsDir.eachFile { file ->
                    println file.name
                    buildedWarFile = file.name
                }
            } else {
                println "Revision directory not found or not a directory"
            }

            // Reset to the original HEAD
            def resetProcess = "git reset --hard HEAD".execute([], projectDir)
            resetProcess.waitFor()
            println resetProcess.in.text
            println resetProcess.err.text

            if (resetProcess.exitValue() != 0) {
                println "Failed to reset to original HEAD"
                return
            }
        }
    }
}

task zipPreviousBuilds(type: Zip) {
    dependsOn buildPreviousRevisions
    from("${project.buildDir}/previous-builds") {
        include '**/*.war'
    }
    archiveFileName = 'previous-builds.zip'
    destinationDirectory = file("${project.buildDir}")
}

task team {
    dependsOn zipPreviousBuilds
}
