import java.awt.Toolkit

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.9.22'
    id 'war'
    id 'net.nemerosa.versioning' version '2.4.0'
}

group = 'web'
version = versioning.info.full

repositories {
    mavenCentral()
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

dependencies {
    compileOnly('jakarta.enterprise:jakarta.enterprise.cdi-api:4.0.1')
    compileOnly('jakarta.validation:jakarta.validation-api:3.0.2')
    compileOnly('jakarta.ejb:jakarta.ejb-api:4.0.1')
    compileOnly('jakarta.faces:jakarta.faces-api:3.0.0')
    compileOnly('jakarta.servlet:jakarta.servlet-api:6.0.0')
    compileOnly('jakarta.persistence:jakarta.persistence-api:3.1.0')
    compileOnly('jakarta.platform:jakarta.jakartaee-web-api:10.0.0')
    compileOnly('jakarta.json:jakarta.json-api:2.1.1')
    compileOnly('jakarta.json.bind:jakarta.json.bind-api:3.0.0')

    implementation('com.fasterxml.jackson.core:jackson-databind:2.12.1')
    implementation('org.postgresql:postgresql:42.6.0')
    implementation('org.primefaces:primefaces:13.0.0:jakarta')

    implementation('org.jetbrains.kotlin:kotlin-stdlib-jdk8')
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}

task compile {
    compileKotlin
}

task playSound {
    doLast {
        def toolkit = Toolkit.getDefaultToolkit()
        toolkit.beep()
    }
}

build.finalizedBy(playSound)

task getPreviousRevisions {
    doLast {
        def process = "git rev-list --max-count=4 HEAD".execute()
        process.waitFor()
        def revisions = process.in.text.readLines()
        file('revisions.txt').text = revisions.join('\n')
    }
}

task buildPreviousRevisions {
    dependsOn getPreviousRevisions

    doLast {
        def revisions = file('revisions.txt').readLines()
        def projectDir = project.projectDir
        def buildDir = new File(project.buildDir, 'previous-builds')

        if (!buildDir.exists()) {
            buildDir.mkdirs()
        }

        revisions.each { rev ->
            def revisionDir = new File(buildDir, rev)
            if (!revisionDir.exists()) {
                revisionDir.mkdirs()
            }

            // Checkout the specific revision
            "git checkout ${rev}".execute([], projectDir).waitFor()

            // Build the project
            def buildProcess = "gradle clean build".execute([], projectDir)
            buildProcess.consumeProcessOutput(System.out, System.err)
            buildProcess.waitFor()

            // Move the WAR file to the revision directory
            def warFile = file("${project.buildDir}/libs/${project.name}-${project.version}.war")
            if (warFile.exists()) {
                warFile.renameTo(new File(revisionDir, "${project.name}-${rev}.war"))
            }

            // Reset to the original HEAD
            "git reset --hard HEAD".execute([], projectDir).waitFor()
        }
    }
}

task zipPreviousBuilds(type: Zip) {
    dependsOn buildPreviousRevisions
    from("${project.buildDir}/previous-builds") {
        include '**/*.war'
    }
    archiveFileName = 'previous-builds.zip'
    destinationDirectory = file("${project.buildDir}")
}

task team {
    dependsOn zipPreviousBuilds
}